<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on yefengzhichen&#39;s blog</title>
    <link>https://yefengzhichen.github.io/post/</link>
    <description>Recent content in Posts on yefengzhichen&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 08 Apr 2024 10:34:40 +0800</lastBuildDate><atom:link href="https://yefengzhichen.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Istio 1.21.0 版本 inpod ambient 模式源码解析</title>
      <link>https://yefengzhichen.github.io/post/istio_ambient_source/</link>
      <pubDate>Mon, 08 Apr 2024 10:34:40 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_ambient_source/</guid>
      <description>版本说明 基于 istio 1.21.0 版本源代码，ambient 进行了大更新，从原来的主机网络命名空间中重定向更新为 in-Pod 网络命名空间重定向，解决了原有模式 Istio CNI 扩展的</description>
    </item>
    
    <item>
      <title>istio 多集群访问流程和源码分析</title>
      <link>https://yefengzhichen.github.io/post/istio_multicluster_analyse/</link>
      <pubDate>Tue, 21 Nov 2023 16:10:46 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_multicluster_analyse/</guid>
      <description>安装 kubernetes 集群创建 部署方式为多网络多控制面，这里使用 k3s 安装两个 kubernetes 集群，安装后需执行： 1 2 3 4 5 6 7 8 9 # 拷贝 kubeconfig 配置，istioctl 需要 cp /etc/rancher/k3s/k3s.yaml ~/.kube/config #</description>
    </item>
    
    <item>
      <title>istio 集成 cert-manager 使用和源码分析</title>
      <link>https://yefengzhichen.github.io/post/istio_cert_manager_src/</link>
      <pubDate>Thu, 26 Oct 2023 14:11:10 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_cert_manager_src/</guid>
      <description>cert-manager 和 mTLS 介绍 cert-manager 将证书和证书颁发者添加为 Kubernetes 集群中的资源类型，并简化了获取、更新和使用这些证书的过程。相比 istio 自带的 CA 管理，cert-manager</description>
    </item>
    
    <item>
      <title>Istio 服务可见性和命名空间隔离</title>
      <link>https://yefengzhichen.github.io/post/istio_visibility/</link>
      <pubDate>Mon, 22 May 2023 18:46:11 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_visibility/</guid>
      <description>服务可见性 istio 中每个服务默认可以访问网格中的任何服务，因此 istio 下发给每个 sidecar 的配置中会包含全量的服务数据，sidecar 可能会出现负载过高、内存过</description>
    </item>
    
    <item>
      <title>Istio 灰度发布</title>
      <link>https://yefengzhichen.github.io/post/istio_release/</link>
      <pubDate>Mon, 08 May 2023 18:46:11 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_release/</guid>
      <description>灰度发布介绍 灰度发布，又名金丝雀发布（canary release、canary launch 或 canary deployment ），是指在黑与白之间，能够平滑过渡的一种发布方式。是指</description>
    </item>
    
    <item>
      <title>Istio Ingress/Egress 详解</title>
      <link>https://yefengzhichen.github.io/post/istio_gateway/</link>
      <pubDate>Fri, 05 May 2023 18:46:11 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_gateway/</guid>
      <description>Gateway 介绍 Istio Gateway 描述在网格边缘运行的负载均衡器，用于接收传入或传出的 HTTP/TCP 连接。Istio Gateway 网关跟 sidecar 代理都是使用的 envoy 程序，其配置也可以用 istioctl 命令来查看。</description>
    </item>
    
    <item>
      <title>Istio dns 原理详解</title>
      <link>https://yefengzhichen.github.io/post/istio_dns/</link>
      <pubDate>Wed, 29 Mar 2023 09:55:25 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_dns/</guid>
      <description>问题背景 在之前使用 ServiceEntry 和 EnvoyFilter 来接入 dubbo 服务到 istio 中时，最开始一直疑惑，当 consumer 端使用 ServiceEntry 中的 host 去访问，但 EnvoyFilter 中直接使用的是 addresses 和端口来进行过滤器匹配的，下发的</description>
    </item>
    
    <item>
      <title>手动接入 dubbo 到 istio</title>
      <link>https://yefengzhichen.github.io/post/istio_dubbo_manual/</link>
      <pubDate>Wed, 22 Mar 2023 16:03:22 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_dubbo_manual/</guid>
      <description>整体流程 这里以 dubbo 官方示例 中的 dubbo-samples-zookeeper 示例代码为基础，实现这样的功能： provider 和 consumer 以镜像方式部署在 kubernetes 中，并接入 istio 代理 通过 ServiceEntry 来确定提供方，provider 和</description>
    </item>
    
    <item>
      <title>Istio dubbo协议支持</title>
      <link>https://yefengzhichen.github.io/post/istio_dubbo_registry/</link>
      <pubDate>Tue, 28 Feb 2023 11:34:07 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_dubbo_registry/</guid>
      <description>背景 需求场景是，将 dubbo2 框架的应用迁移到 istio 网格中，dubbo2 使用的注册中心可能有 zookeeper、nacos、etcd，这里对 dubbo 接入网格的几</description>
    </item>
    
    <item>
      <title>dubbo 多种部署场景测试</title>
      <link>https://yefengzhichen.github.io/post/dubbo_demo/</link>
      <pubDate>Tue, 21 Feb 2023 17:47:45 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/dubbo_demo/</guid>
      <description>测试准备 介绍 以下介绍是摘自 Dubbo 官网，Dubbo 是一款 RPC 服务开发框架，用于解决微服务架构下的服务治理与通信问题，官方提供了 Java、Golang</description>
    </item>
    
    <item>
      <title>Istio pilot-agent 源码解析</title>
      <link>https://yefengzhichen.github.io/post/istio_pilot_agent_src/</link>
      <pubDate>Fri, 03 Feb 2023 18:46:11 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_pilot_agent_src/</guid>
      <description>pilot-agent 源码 整体流程 整体逻辑如下图，简单来说分为以下几步： pilot-agent 启动后，生成私钥和 CSR（证书签名请求），用 CSR 请求 istiod 获取工作负载证书，ROOTCA 根证</description>
    </item>
    
    <item>
      <title>Istio 多集群模型和部署示例</title>
      <link>https://yefengzhichen.github.io/post/istio_multicluster/</link>
      <pubDate>Thu, 12 Jan 2023 19:15:55 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_multicluster/</guid>
      <description>多集群部署模型 根据官网的 部署模型说明，istio 部署时，在下面四个纬度都可以进行自由选择： 单一或多个集群 单一或多个网络 单一或多控制平面 单一或</description>
    </item>
    
    <item>
      <title>Istio 多协议、多注册中心支持调研</title>
      <link>https://yefengzhichen.github.io/post/istio_multi_protocols_multi_registries/</link>
      <pubDate>Wed, 11 Jan 2023 14:30:26 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_multi_protocols_multi_registries/</guid>
      <description>问题背景 在大规模现网环境中使用 istio 等服务网格，通常会因为技术栈的不同遇到一些痛点，这里就以 istio 为例，比如： istio 如何对接各种外部注册中心：如 Cons</description>
    </item>
    
    <item>
      <title>Istio 安装和示例实践</title>
      <link>https://yefengzhichen.github.io/post/istio_demo/</link>
      <pubDate>Thu, 05 Jan 2023 19:23:49 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/istio_demo/</guid>
      <description>安装 需要先准备一个 kubernetes 集群，这里是用的 k3s 安装 的 1.25 版本。 下载 istio 先下载 istio 安装文件，执行： 1 curl -L https://istio.io/downloadIstio | sh - 如果测试机器下载不了，可以手动下载脚本和安装</description>
    </item>
    
    <item>
      <title>Kubernetes 的 informer 源码分析</title>
      <link>https://yefengzhichen.github.io/post/k8s_informer/</link>
      <pubDate>Tue, 03 Jan 2023 11:15:44 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/k8s_informer/</guid>
      <description>测试代码 下面代码是是从 client-go 中的测试代码修改而来，通过单步运行来帮助梳理代码逻辑。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31</description>
    </item>
    
    <item>
      <title>Kubernetes Gateway Api 介绍</title>
      <link>https://yefengzhichen.github.io/post/kubernetes_gateway_api/</link>
      <pubDate>Wed, 30 Nov 2022 14:49:18 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/kubernetes_gateway_api/</guid>
      <description>介绍 本文根据官方文档翻译汇总而成。 Gateway API 是一个由 Kubernetes SIG-NETWORK（网络兴趣小组）管理的开源项目。这是一个资源的集合，定义了 Kubernetes 中服务网络</description>
    </item>
    
    <item>
      <title>Csdn博客文章汇总</title>
      <link>https://yefengzhichen.github.io/post/csdn_top_articles/</link>
      <pubDate>Wed, 30 Nov 2022 11:41:58 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/csdn_top_articles/</guid>
      <description>之前断断续续在csdn上写了一些文章，大多都是随便记录的，只有少数是花费了挺多时间整理出来的，这里将其中有价值的一些文章汇总在此，后续也会陆</description>
    </item>
    
    <item>
      <title>Golang 数组和切片深入分析</title>
      <link>https://yefengzhichen.github.io/post/golang_slice/</link>
      <pubDate>Wed, 30 Nov 2022 11:35:39 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/golang_slice/</guid>
      <description>一、数组 数组赋值给数组 Go 数组是值类型，因此赋值操作和函数传参数会复制整个数组的数据，例： 1 2 3 4 5 6 7 8 9 10 11 func main() { a := [3]int{1, 2, 3} b := a fmt.Printf(&amp;#34;a addr: %p, a[0]</description>
    </item>
    
    <item>
      <title>Oathkeeper 介绍和使用实例</title>
      <link>https://yefengzhichen.github.io/post/oathkeeper/</link>
      <pubDate>Wed, 23 Nov 2022 18:52:15 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/oathkeeper/</guid>
      <description>登陆和访问逻辑 目前网页端平台用户的登陆流程是，请求 ems_dashboard_api 服务的/ems_dashboard_api/auth_login/接口，返回 session_id cookies 数据，返</description>
    </item>
    
    <item>
      <title>视频点播服务架构简介</title>
      <link>https://yefengzhichen.github.io/post/video_on_demand/</link>
      <pubDate>Mon, 17 Oct 2022 11:28:33 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/video_on_demand/</guid>
      <description>整体架构 视频点播服务：用于腾讯视频、爱奇艺、抖音等类似的在线视频播放平台，简单介绍下这样一个平台是怎么构成的。整体主要是以下几个模块组成的：</description>
    </item>
    
    <item>
      <title>使用 Envoy 的 OPA 插件进行鉴权</title>
      <link>https://yefengzhichen.github.io/post/envoy_opa_auth/</link>
      <pubDate>Sat, 17 Sep 2022 20:13:50 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/envoy_opa_auth/</guid>
      <description>背景 工作中的一个 IAM（身份与访问管理）服务中，使用到了 OPA（开放策略代理）进行鉴权，针对前端来的一个请求，主要处理逻辑如下图红色箭头所示</description>
    </item>
    
    <item>
      <title>Kubebuilder使用介绍</title>
      <link>https://yefengzhichen.github.io/post/kubebuilder/</link>
      <pubDate>Fri, 09 Sep 2022 15:19:26 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/kubebuilder/</guid>
      <description>Kubebuilder 是什么 Kubebuilder 是一个使用自定义资源定义（CRDs）来构建 Kubernetes API 的框架。与 Ruby on Rails 和 SpringBoot 等 web 开发框架类似，Kubebuilder 提高了开发人员使用 Go 语言</description>
    </item>
    
    <item>
      <title>使用 code-server 和 nocalhost 制作 web 调试镜像</title>
      <link>https://yefengzhichen.github.io/post/code_server_local_image/</link>
      <pubDate>Sat, 03 Sep 2022 20:13:39 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/code_server_local_image/</guid>
      <description>背景 之前写了一篇文章，分享了如何使用 kt-connect 来加速云原生的开发，但是在实际使用中发现一些问题，比如： 环境不一致，每个开发人员都需要安装和调试程序一</description>
    </item>
    
    <item>
      <title>使用 kt-connect 本地调试 k8s 集群内服务</title>
      <link>https://yefengzhichen.github.io/post/kt_connect/</link>
      <pubDate>Sat, 03 Sep 2022 09:49:06 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/kt_connect/</guid>
      <description>一、kt-connect 介绍 背景 影响软件开发效率最大的问题依然是集成的问题，DevOps 通过持续交付流水线的方式不断的对软件进行集成，但是 DevOps</description>
    </item>
    
    <item>
      <title>GitHub&#43;Hugo搭建个人博客</title>
      <link>https://yefengzhichen.github.io/post/hugo_blog/</link>
      <pubDate>Fri, 02 Sep 2022 20:14:03 +0800</pubDate>
      
      <guid>https://yefengzhichen.github.io/post/hugo_blog/</guid>
      <description>GitHub仓库创建 GitHub Pages 是通过 GitHub 托管和发布的公共网页，首先需要创建一个名为username.github.io的仓库， username是Gi</description>
    </item>
    
  </channel>
</rss>
